#############################
HTTP REQUEST RESPONSE ACTIONS
#############################
	
	A.	GET

- RENDER A PAGE: a simple HANDLER function:
	
	app.get(route, middleware, (req, res) => {
		res.render('/page')
	})

- RESPOND WITH JSON

res.send('accepts any string');
res.json({ username: 'I am the user' });

The res.json will convert the object into JSON.

For more complex GET requests that include data lookup in db, see MongoDB or MySQL docs.

- SET HEADERS

You can change any HTTP header value using:

	res.set('Content-Type', '<type>');

or shorthand:

	res.type('html')	//	-> text/html 
	res.type('json')	//	-> application/json
	res.type('png')	//	-> image/png

- REDIRECT

With res.redirect('/') you create a 302 redirect. To get a 301 code you write res-redirect(301, '/');

absolute path ('/go-there'), 
an absolute url ('https://anothersite.com' ),
a relative path ('go-there')

res.redirect('..') or ('../page'); up one level
res.redicerct('back') defaulting to / if Referer HTTP header value not set 
	

	B.	POST

Setup a app.post() route. You can test it with POSTMAN. If the route starts at a form on a page your should add to the route:
	
	form located on /form
	post route: /form/submit	-> <form action="" method"POST">

The "name" tag in the form is processed in the BODY of the http request. To get access to this data you need to PARSE that object (see Body Parser)
	
When connected to a database you will want to store that data but in its most basic form you can add it to an (existing) array.
	
	let items = []
	let addedItem = req.body.formNameTag
	items.push(addItem)

When sending back JSON in an API you can add a status code, to make the console info more useful. Standard the code will be OK 200, but you can use 201 CREATED:

	res.status(201).json(newData)

	C.	PUT AND DELETE

When working with forms in HTML take into account that PUT and DELETE have not been part of HTML specs and therefore those type of requests will be, by default, processed as POST requests. 

To amend this, use the package METHOD OVERRIDE. 

	app.use(methodOverride('_method')); 

The method to use in EXPRESS is the method findByIdAndUpdate() or findByIdAndRemove(). See mongoDB docs for details.
	
In the html you write:
	
	method="POST"
	action="/<route>?_method=PUT"
	action="/<route>?_method=DELETE"

For the updating you sometimes want to display the original message or post on a seperate page. This requires finding the post id through a SHOW route. Plus, passing the content through an object that is displayed by adding a VALUE to the form INPUT element or TEXTAREA.
	
	action="/<route>/<%= postData._id %>?_method=PUT"
	value="<%= postData.title %>">

NOTE: when working with TEXTAREA elements inside forms those have no value attribute, just pass as plain text/ejs:
	 
	<textarea><%= postData.body %></textarea> 

The update route has two components: EDIT and UPDATE. The EDIT route redirects to an EDIT FORM and passes through the objectData. The UPDATE route makes the changes in the DB and redirects back.

	router.get('/:id/edit', (req,res) => {
	dataModel.findById(req.params.id, (err, foundData) => {
		if(err){}
		else {res.render('editForm', {dataObject: foundData})}
	) 
	})
	
	router.put('/:id', (req,res) => {
		dataModel.findByIDandUpdate(req.params.id, 							req.body.<objectInHTML>, 
				(err, updatedData)=>{
					if(err){}
						else{res.redirect('')}
				})
	})

DELETE

Deleting is done through a FORM that only has a button:

	action="/<route>/<%= postData._id %>?_method=DELETE"
	metthod="post

The delete route:
	
	router.delete('/:id', (req, res) => {
		dataModel.findByIdAndRemove(req.params.id, (err) => 			{if(err){} else{res.redirect('')}})
	})	
