####################
REQUEST DATA PARSING
####################

The raw data from the header and body is not very convenient to work with as it is not accessible through the root object (req.body). You would have to write specific code to access each property. Therefore you can use the package BODY-PARSER.

Body-parser is middleware that extracts the entire body portion of an incoming request stream and exposes it on req.body as something easier to interface with, a JS object OR JSON. 

Only after setting the req.body to the desirable contents will it call the next middleware in the stack, which can then access the request data without having to think about how to unzip and parse it.

For comparison; in PHP all of this is automatically done and exposed in $_POST.

METHODS

	bodyParser.urlencoded() 

Parses the text as URL encoded data (which is how browsers tend to send form data from regular forms set to POST) and exposes the resulting object (containing the keys and values) on req.body. 

This parser accepts only UTF-8 encoding of the body.

The req.body object will contain key-value pairs, where the value can be a string or array (when extended option is set to false), or any type (when extended option is set to true).

	bodyParser.json()
		
This parser accepts any Unicode encoding of the body and parses the text as JSON and exposes the resulting object on req.body.

The body parser of your choice needs to be configured in the express app.
	
	app.use(bodyParser.urlencoded({extended: true}));
or
	app.use(bodyParser.json());
	
RESPOND WITH JSON

When you want to respond to a user request with JSON you can use the res.send({message: 'hello'}) is convert to JSON automatically but better use the res.json as strings in res.send('') are treated as html.

	res.json({message: 'hello'})