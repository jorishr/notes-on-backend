##############################
AUTHENTICATION WITH PASSPORTJS
#########################################
I.	ABOUT PASSPORT.JS
II.	INSTALL AND CONFIG
	A.	EXPRESS SESSION
	B.	LOCAL STRATEGY: 
		1.	SETUP ACCOUNT DATA MODEL
		2.	CONFIGURE PASSPORTJS	
	C.	AUTHENTICATION ROUTES
III.	PASSWORD RESET WITH NODEMAILER
#########################################

FULL GUIDE:
https://github.com/alex996/presentations/blob/master/node-auth.md

EXPRESS SESSION+REDIS
https://github.com/alex996/presentations/blob/master/express-session.md

REFERENCE:https://scotch.io/tutorials/easy-node-authentication-setup-and-local

#######################
I.	ABOUT PASSPORT.JS
#######################

Passport is authentication middleware for Node.js.

It is designed to serve a singular purpose: authenticate requests.

Three pieces need to be configured to use Passport for authentication: 
	
	(1) Authentication strategies: local, OAuth, etc...

Before asking Passport to authenticate a request, the strategy (or strategies) used by an application must	be configured.
		
Traditionally, users log in by providing a username and password. With the rise of social networking, single sign-on using an OAuth provider such as Facebook or Twitter has become a popular authentication method.

	(2) Application middleware
		
Configure on which type of http requests you want the authentication to happen. This may not be necessary on all routes of the website.

	(3) Express-session

Express session handles the AUTHORIZATION process: make sure that the user that makes the request is the user that is logged-in.

By default Express requests are sequential and no request can be linked to each other as HTTP is a stateless protocol. 

When EXPRESS SESSIONS is implemented, every user of you API or website will be 	assigned a unique encoded session id, and this allows you to store the user state (logged-in or not).

PassportJS will interpret this info and establish a persistent login session. 

########################
II.	INSTALL AND CONFIG
########################
	
The packages need are:

	PASSPORT
	PASSPORT-LOCAL, for the local auth strategy 
	PASSPORT-LOCAL-MONGOOSE, plugin for User data model 
	EXPRESS-SESSION

	A.	EXPRESS SESSION

See seperate doc for EXPRESS SESSION. 

Sessions are used to identify users across http requests (which are independent from each other).

After this is done, all the requests to the app routes are now using sessions. 

	B.	LOCAL STRATEGY

The local strategy does not depend on third party authentication providers and has a simple data model.

		1.	DEFINE USER/ACCOUNT DATA MODEL

Create a new collection in the database for USERS or ACCOUNTS. Export the User or Account constructor model and import it into the express app.js

	mongoose = require('mongoose'),
	passportLocalMongoose = require('passport-local-	mongoose');

	let UserSchema = new mongoose.Schema({
   		username: String,
    		password: String
	});

Add the passport-local-mongoose plugin:
	
	UserSchema.plugin(passportLocalMongoose, {<options>});

Passport-Local Mongoose will add a username, hash and salt field to store the username, the hashed password and the salt value.

Additionally Passport-Local Mongoose adds some methods to your Schema. See the API Documentation section for more details.

	let User = mongoose.model('User', UserSchema);

NOTE: this is similar to creating other datastructures with Mongoose. The only difference the use of the plugin.


		2.	CONFIGRURE PASSPORTJS

The order of statements is important.

	app.use(expressSession({}))

	app.use(passport.initialize())
	app.use(passport.session())

Tell express to use EXPRESS SESSION first, then initialize passportjs and make passport use express-session.

Define the auth strategy to use and which the USER/ACCOUNT data model. End with User data serialization.

	passport.use(new LocalStrategy(User.authenticate()));

	passport.serializeUser(User.serializeUser());
	passport.deserializeUser(User.deserializeUser());
	
SerializeUser determines which data of the user object should be stored in the session. 

The result of the serializeUser method is attached to the session as req.session.passport.user = {id: 'xyz'}. Here we provide the user id as the key, but this can be any key of the user object i.e. name, email, etc.

In deserializeUser that key is matched with the in memory array / database (or any data resource).

The fetched/retrieved object is attached to the request object as req.user

	C.	AUTHENTICATION ROUTES

There are three fundamentel routes: register, login, logout. And you could add profile page to update and delete user data.

REGISTER

The register GET route is simple: render a FORM.

The register POST route stores the form data in the database by creating a new User, following the USER MODEL defined above.

router.post('/register', (req,res) => {	
	User.register(new User({}), req.body.password, (err)=>{})

The User.register is a mongoose method which takes in two parameters and the callback function. First you call the User constructor and pass in the form data. Second is the password which is stored seperately. In the callback function you define what to do next, for example auto-login the new user or send a confirmation e-amil and redirect the user.

The form data can be accessed on the req.body.<name> and it is best to add VALIDATION and SANITIZATION to it first before storing it in the database.

	{
        username:       req.body.username,
        firstname:      req.body.firstName,
        lastname:       req.body.lastName,
        email:          req.body.email,
	}


NOTE: By default there is no usefull feedback for the user to see if the registering or login was succesfull or not, other than redirecting back to the form or to another page.

You can amend that by passing the error message to page rendering where you add this dynamically through ejs: if(err.message){//show some html} or it will be handled by Flash messages if installed.

	if(err){
	return res.render('register', {'error': err.message});}


LOGIN

The GET route is again a simple redirection to a form.
The post route includes AUTHENTICATION and redirection, the HANDLER function is present but does not include any action by default but you can pass the error handling to EXPRESS.

 	router.post('<route>', <authenticate>, <handler>)

router.post('/login', passport.authenticate('local', {
    successRedirect: '/campgrounds',
    failureRedirect: '/login',
    failureFlash: true,
}), 
    (req, res, next) => {
        if(err){err.shouldRedirect = true; return next(err);};
});

An alternative method would be to incorporate the authentication in the HANDLER. This can be used to auto-login on a route AFTER other action need to be performed. The syntax is rather strange, see PassportJS docs for details:
		
		...
		...
 	passport.authenticate('local')(req, res, function({			console.log('User logged-in successfully!');
           res.redirect('/campgrounds');

LOGOUT

The logout is basically just a link/button with a GET route.

router.get('/logout', (req, res) => {
	req.logout();
    	console.log('User logout success!');
	req.flash('success', 'Logged out successfully!')
    	res.redirect('/');
});