#########
JWT SETUP
#########

#######################
I.	PRELIMINARY STEPS
#######################

- basic express setup
- basic route setup for API -> get, for example
- basic AUTHENTICATION SETUP (with login/logout)
- get the username form req.body.username
- create AUTHORIZATION middleware function


#############################
II.	INITIATE JWT UPON LOGIN
#############################

Inside the LOGIN ROUTE:

- get the username from req.body.username to create a user object
    
- this user object is serialized as the payload with JWT, using the TOKEN_SECRET (stored in .env):
    
- store the result in a variable as the accesstoken
	const accessToken = jwt.sign(user, TOKEN)
	res.json({accessToken: accessToken});

- thus now each time user is logged-in correctly, an accessToken is generated, which has the user data stored inside it for future reference.


##############################
III.	AUTHORIZATION MIDDLEWARE
##############################
Create a function that can be applied as middleware to various protected routes.

- get the JWTtoken, verify it and return that verified user
    
- the JWT token is available in the headers and is stored after the keyword: Bearer TOKEN

- the req.headers['authorization'] is a string we split into an array of substrings, where we access the second value [1]

    const   authHeader  = req.headers['authorization'],
            token       = authHeader && authHeader.split(' ')[1];

- then first check if there is and authHeader
- if there is none, send an error message
- if there is one, verify it with the SECRET TOKEN

- the verify function has CALLBACK: (err, user): 
	if verification fails, inform user about invalid token (403) 
     	if verification success, set the req.user to the 	deserialized user object.

    if(token == null){return res.sendStatus(401)};
    jwt.verify(token, process.env.TOKEN_SECRET, (err, user) => {
        if(err) return res.sendStatus(403);
        req.user = user; 
    
- move on with next() middleware

- on the PROTECTED ROUTE you can now access access the authorized user object req.user = user and use it, for example, as a filter.

	app.get('/posts', authorizeUser, (req, res) => {
    	    res.json(posts.filter(post => post.username === 					req.user.name));
	});