##############################
PASSWORD RESET WITH NODEMAILER
##############################

PACKAGES

Async is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript. 

Mailgun is a transactional Email API that enable you to send, receive, and track emails.

Also require in CRYPTO which is part of nodeJS.

	npm i -S async nodemailer

        async       = require('async'),
        crypto      = require('crypto'),
        mailgun     = require('mailgun-js');


USER DATA MODEL

Add the properties resetPasswordToken (String) and resetPasswordExperis(Date) to the User model.

They are not part of a newly created document, because they are set only after password reset is submitted. 

And since we haven’t specified default values, those properties will not be set when creating a new user, but you do need to forsee them in your data model.


ROUTES
1. get 	-> render forgot password form
2. post 	-> run the malgun code and render message
3. get 	-> render reset form with token received in email
4. post 	-> update password in the database

Add the routes to app.js!


CREATING TOKEN AND SENDING EMAIL

The sequence of async code is provided by MAILGUN. First the nodejs package CRYPTO is used to generate a token. 

Next you have to find the user email in your database.
If the record exists, then you set add the token to the foundUserObject together with the expiration date.

Save the new db record.

Next you have the MAILGUN configuration where you can set the email message.

IMPORTANT is where the email link will send the user to when he clicks on the token. /reset/:token

	http://${req.headers.host}/reset/${token}


RESET ROUTE

The reset route is thus /reset/:token

First look up the user in the db with a corresponding token and check if the token expiration is greater than now. If that is correct you render the RESET FORM and pass along the token. 

If the token has expired or the user has no token REDIRECT

    User.findOne({
        resetPasswordToken: req.params.token, 
        resetPasswordExpires: {$gt: Date.now()}
    }

    res.render('users/reset', {token: req.params.token});


UPDATE PASSWORD ROUTE

The form that is rendered will have two fields: password and confirm. Both have to match! If not the form will rendered again.

Again, first look up the user in the db with a corresponding token and check if the token expiration is greater than now. If that is correct write the new password to the database reset the tokens to undefined, plus auto-login.

	if(req.body.password === req.body.confirm){
      	foundUser.setPassword(req.body.password, (err) => {
           	foundUser.resetPasswordToken = undefined;
           	foundUser.resetPasswordExpires = undefined;
  			foundUser.save((err) => {
           		req.logIn(foundUser, (err) => {
                			cb(err, foundUser);

When that is done, repeat the Mailgun code for sending a confirmation email.