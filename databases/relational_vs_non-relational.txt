######################################
RELATIONAL VS NON-RELATIONAL DATABASES
######################################

RELATIONAL
Data is stored following a STRICT SCHEMA. This is good for predictability and maintenance but is less flexible.

Example, when storing user data with lots of optional values you still need to foresee columns or fields that can be null. In a non-relational db those fields will simply not exist.

Relations are established between tables by QUERIES or JOINS. When for example the users data changes, you don't need to update the product history data, as it is stored in a seperate table. In a non-relational database you can have duplicate data that may have to be updated in various places.

This is one reason why non-relational databases are considered to be faster or more efficient with large volumes of READ queries and relational databases have the advantage on large volumes of WRITE queries.

Horizontal scaling on relational databases is near impossible as seperating and merging the data over multiple servers is very hard to do. You can scale vertically by adding more computational power the existing server, but that too has its limits.

In a non-relational database there are no relations and various collections can be spread over multiple servers. Thus NoSQL databases are the preferred choice for large or ever-changing data sets.

SQL requires that you use predefined schemas to determine the structure of your data before you work with it. In addition, all of your data must follow the same structure. This can require significant up-front preparation, and it can mean that a change in the structure would be both difficult and disruptive to your whole system.

The flexibility of a non-relational db means that:
- you can create documents without having to first define their structure
- each document can have its own unique structure
- you can add fields as you go

