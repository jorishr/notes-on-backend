##############
BACKEND BASICS
############################################
I. 	MY STACK
II. 	HOW WEBSITE PAGE LOOKUP WORKS
III.	STATIC v DYNAMIC PAGES
IV.	HTTP REQUEST RESPONSE CYLCE
V. 	EXAMINING GET REQUEST (IN POSTMAN ADE)
VI.	EXAMINING POST REQUEST
############################################

####################
I. MY BACK-END STACK
####################

MERN: MongoDB, Express, React, NodeJs
	- note: using JSON
	- Language: JS through the NodeJs environment
	- Express as the server framework 
	- MongoDB/MySql as the database
	- React as front-end framework

Dev tOOLS

+ NPM
+ Webpack
+ Git
+ Sass
+ Gulp 
+ Unit testing (Jasmine)
+ POSTMAN

##############################################
II.	COMMON BACK-END STRUCTURE/FEATURES/TASKS
##############################################
 
- check if a user is logged in, based on that condition send different type of html/css/JS

- on the server: singup a new user, add new post to database, create new comment

- on the database: remove post/comment, sort posts/comments 

BACKEND STRUCTURE

1. Server Setup code, listing dependencies that are used
2. Database setup
3. Routing setup (routes to pages)

Once the server is started, it will be listening for HTTP requests coming from a usually a browser or ftp requests from a ftp client.

###################################
III.	HOW WEBSITE PAGE LOOKUP WORKS
###################################

URL -> IP -> DNS

The fastest route is found to the server with a specific IP. HTTP REQUESTS contains specific info: IP of origin, timestamp, type of request and specific page that is wanted.

Server builds up the required content, usually pulling info from a database. 

The http RESPONSE will be a combination of database data, JS, CSS and HTML. The browser will then render that respons into a human readable page.

###########################
III. STATIC v DYNAMIC PAGES
###########################

A static page is compiled or rendered entirely by the server before the http response is send. You receive the same content every single time you load the page.

Dynamic pages can serve different content based on conditions/variables, for example: logged in or not.

The dynamic part is usually taken care of by the back-end part of the stack: back-end language - server - database

The static part is usually the front-end part: 
HTML / CSS / JS /images.

###############################
IV. HTTP REQUEST RESPONSE CYLCE
###############################

A certain type of request is made to the server (get, post, patch, copy, delete, etc.) by either browser, command line, nodeJS, postman...
The server processes this request and sends back a response.

For example: retrieve the google.com homepage is a GET request. What you get back is HTML/CSS/JS combo code which the browser shows a usable page.

POST requests is when you submit new information to a server, thus alongside the http request you send additional data, for example, a comment, a picture...

PUT and PATCH are to update or edit existing data.

The HTTP request has a BODY and a HEADER:
The body contains all the actual data that is being send. Text input or CSS/HTML/JS combo from the server. The header contains functional or meta-data about the request. Most important is to understand the status codes.

HTTP

The hypertext transfer PROTOCOL is just a protocol, through which we expect certain things to happen. 

Sending the DELETE request, for example, we EXPECT the server to go and delete an item from the database. Whether this actually happens or not does not depend on the HTTP request.

Each HTTP request is independent. It does not have nor stores information about previous or future requests. 

To complement the user experiences other tools can be used: cookies, local storage or sessions. But at it's core a http request stands on its own.

HTTP/2 (version 2) allows for multiplexing which means you can have multiple request that run at the same time in parallel. This has not much implications for web developers but it does increases efficiency and speed.

HTTPS adds a secure encryption to each http cycle using SSL or TLS. SSL: secure sockets layer; TLS: transport security layer. TLS is the successor of SSL and SSL handshakes are now called TLS handshakes, although the "SSL" name is still in wide use.


####################################################
V.	COMPONENTS OF HTTP GET REQUEST (IN POSTMAN ADE)
####################################################

NOTE: Here we use postman app but under the network tab in chrome dev tools you can find similar information. 

	A.	GET

GET request for google.com produces a response from the google servers that contain:

- body: raw code (containing html, css, js), same as page source you can access in the browser

- headers: 12, metadata about the response containing: timestamp, content-type

- status: 200 OK, the status codes are part of the http protocol, if a page is not found on the server you get a 404 error code.

QUERY STRINGS:

Get is only used to retrieve info from the server and thus we do not send data with it, EXCEPT for search queries. 

When searching we do not add data to a server/database. We just send some additional query string with the http request.

The browser bar itself can only make GET requests (no put, delete or post) and there you can see or even write the query strings: 

	?q=value&key=value

	https://www.reddit.com/search?q=test1%20test2&city=bcn
	www.reddit.com/search?q=tower&structure=bridge

	<%20> is a space
	<&> seperates the different queries

In postman you can automatically add those parameters.

Thus when such a GET request is made, the server is programmed to work with those requests by running a specific code. For example, code that searches for keywords inside an array of objects.


	B.	EXAMINING POST REQUEST

Post is almost always used with a form whereby the action and method attributes of html link to the JS programs on the backend:

<form action="/url" method="POST">
	<input type="text" name="object property1 name">
	<input type="text" name="object property2 name">
	<input type="submit">
</form>

The above form sends a post http request to the specified url and the values entered into the form will become the values to the specified object properties in the database.

NOTE: the POST request can redirect away from the current page and then refresh the page with newly rendered content.




